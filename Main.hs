module Main where

import Prelude hiding (EQ, LT, GT)

import Control.Monad.State 

import Syntax
import Parser
import CompilerState
import Compiler
import EVMCode as EVM 

writeHex :: EVMCode -> FilePath -> IO ()
writeHex code outPath = do
  let bytecode = EVM.code2bytes code
  putStrLn "Generated bytecode:"
  putStrLn $ show bytecode
  putStrLn $ "Bytecode size: " ++ show (length bytecode)

  let hexString = EVM.code2hexString code
  putStrLn "As hex string:"
  putStrLn $ show hexString
      
  writeFile outPath hexString


compile :: FilePath -> FilePath -> IO ()
compile inPath outPath = do

  input <- readFile inPath
  let prog = parseString input
  putStrLn "Parsed program:"
  putStrLn (show prog)

  let ((labelSize,code),endState) = runState (compileProgram prog) emptyState
  let global = head (csScopes endState)

  -- putStrLn "Global scope:"
  -- putStrLn (show global)

  putStrLn "Error messages:"
  mapM_ putStrLn (csErrorMsgs endState)

  putStrLn "Generated extended EVM assembly:"
  putStrLn $ EVM.showPos code

  putStrLn $ "Label size: " ++ show labelSize

  writeHex code outPath

  putStrLn "Bye!"


jumpTest :: Int -> Int -> EVMCode
jumpTest numJumps numLoops = snd (rewriteLabels code)
  where code = [ EVMPush (makeWord numLoops),
                 EXTLabel "begin",
                 EVMPush (makeWord 1),
                 EVMSwap 1,
                 EVMSimple SUB,
                 EVMDup 1,
                 EVMPush (makeWord 0),
                 EVMSimple EQ,
                 EXTLabelAddr "end",
                 EVMSimple JUMPI ]
               ++ concat (map block [1..numJumps]) ++
               [ EXTLabelAddr "begin",
                 EVMSimple JUMP,
                 EXTLabel "end",
                 EVMPush (makeWord 32),
                 EVMPush (makeWord 0),
                 EVMSimple RETURN ]
               
        block n = [ EXTLabelAddr (destLabel n),
                    EVMPush (makeWord n),
                    EVMPush (makeWord 0),
                    EVMSimple MSTORE,
                    EVMSimple JUMP,
                    EVMSimple STOP,
                    EXTLabel (destLabel n)]

        destLabel n = "dest:" ++ show n


                   
                    

                 
  
  
