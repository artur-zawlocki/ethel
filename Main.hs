module Main where

import Control.Monad.State 

import Syntax
import Parser
import CompilerState
import Compiler
import qualified EVMCode as EVM 

compile :: FilePath -> FilePath -> IO ()
compile inPath outPath = do

  input <- readFile inPath
  let prog = parseString input
  putStrLn "Parsed program:"
  putStrLn (show prog)

  let (code,endState) = runState (compileProgram prog) emptyState
  let global = head (csScopes endState)

  -- putStrLn "Global scope:"
  -- putStrLn (show global)

  putStrLn "Error messages:"
  mapM_ putStrLn (csErrorMsgs endState)

  putStrLn "Generated extended EVM assembly:"
  putStrLn $ EVM.showPos code

  let bytecode = EVM.code2bytes code
  putStrLn "Generated bytecode:"
  putStrLn $ show bytecode

  let hexString = EVM.code2hexString code
  putStrLn "As hex string:"
  putStrLn $ show hexString
      
  writeFile outPath hexString
  putStrLn "Bye!"

  
  
